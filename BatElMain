package fdfdfdf;

import java.io.File;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class BatElMain {

// Methods

    public static List<File> readFilePathsFromConsole() {
        List<File> files = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        String lineNew = scanner.nextLine();
        while (!lineNew.isEmpty()) {
            File file = new File(lineNew);
            files.add(file);
            lineNew = scanner.nextLine();
        }
        scanner.close();
        return files;
    }

    public static void getAllFilePathsRecursively(List<File> filesFromConsole, List<File> allRetrievedFilePaths) {
        for (File fileFromConsole : filesFromConsole) {
            getFilesFromDirectory(fileFromConsole, allRetrievedFilePaths);
        }
    }

    public static void getFilesFromDirectory(File fileFromConsole, List<File> allRetrievedFilePaths) {
        if (!fileFromConsole.isDirectory()) {
            allRetrievedFilePaths.add(fileFromConsole);
        } else { //if the path is a directory which might contain files and subfolders, a recursion is needed to get all the files under that mother path
            File[] filesList = fileFromConsole.listFiles();
            if (filesList.length != 0) {
                for (File file : filesList) {
                    getFilesFromDirectory(file, allRetrievedFilePaths);
                }
            }
        }
    }

    public static void printAllPaths(List<File> allRetrievedFilePaths) {
        allRetrievedFilePaths.stream().forEach(path -> {
            System.out.println(path);
        });
    }

    public static Integer readNumberFromConsole() {
        Scanner scanner = new Scanner(System.in);
        int number;
        try {
            number = scanner.nextInt();
        } catch (InputMismatchException inputMismatchException) {
            System.out.println("This is not an integer. Please type the integer number of maximum occurring words: "); //best to give the user a few more tries, but meh.
            number = scanner.nextInt();
        } catch (NoSuchElementException noSuchElementException) {
            System.out.println("No number was typed. Please type the integer number of maximum occurring words: ");
            number = scanner.nextInt();
        }
        return number;
    }

    public static SortedMap<Integer, String> mapAllWordsFromFileList(List<File> allRetrievedFilePaths) {
        SortedMap<Integer, String> wordsSortedMap = null;
        List<String> allWordsToMap = getAllWordsMultithreading(allRetrievedFilePaths);
        for (String wordToMap : allWordsToMap) {
            if (wordsSortedMap.containsValue(wordToMap)) {
                wordsSortedMap.put(Integer.parseInt(wordsSortedMap.get(wordToMap)) + 1, wordToMap);
            } else {
                wordsSortedMap.put(0, wordToMap);
            }
        }
        return wordsSortedMap;
    }

//    public static List<String> getAllWords(List<File> allRetrievedFilePaths) {
//        List<String> wordsArray = new ArrayList<>();
//        for (File allRetrievedFilePath : allRetrievedFilePaths) {
//            Scanner scanner = new Scanner(allRetrievedFilePath.getPath());
//            while (scanner.hasNextLine()) {
//                String line = scanner.nextLine();
//                wordsArray.addAll(Arrays.asList(line.split("\\s+")));
//            }
//        }
//        return wordsArray;
//    }

    public static SortedMap<Integer, String> getAllWordsMultithreading(List<File> allRetrievedFilePaths) {
        SortedMap<Integer, String> wordsArray;
        int numOfThreads = allRetrievedFilePaths.size();

//        ExecutorService service = Executors.newCachedThreadPool();
//        for (File allRetrievedFilePath : allRetrievedFilePaths) {
//            service.execute(getWordsFromSingleFile(wordsArray, allRetrievedFilePath));
//        }
//        service.shutdown();
//        // wait for all threads to terminate.
//        while (!service.isTerminated()) {
//        }
//        return wordsArray;
    }

    private static List<String> getWordsFromSingleFile(SortedMap<Integer, String> wordsArray, File allRetrievedFilePath) {
        Scanner scanner = new Scanner(allRetrievedFilePath.getPath());
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] wordsInLine = line.split("\\s+");
            for (String word : wordsInLine) {
                if (wordsArray.containsValue(word)) {
                    wordsArray.entrySet()
                } else {
                }

            }
        }
        return wordsArray;
    }

    public static void printNumOfHighestOccuringWords(Integer maxNum, SortedMap wordsSortedMap) {
        if (wordsSortedMap.size() > maxNum) {
            System.out.println("Error! The requested number is higher than the number of words in the files! ");
        } else {
            for (int index = 0; index < wordsSortedMap.size(); index++) {
                System.out.println(wordsSortedMap.values().toArray()[index]);
            }
        }
    }

// Main

    public static void main(String[] args) throws Exception {
        System.out.println("Please type the integer number of maximum occurring words: ");
        Integer maxNum = readNumberFromConsole();
        System.out.println("Please type a list of file paths: ");
        List<File> filesFromConsole = readFilePathsFromConsole();
        List<File> allRetrievedFilePaths = new ArrayList<>();
        getAllFilePathsRecursively(filesFromConsole, allRetrievedFilePaths);
        printAllPaths(allRetrievedFilePaths);
        SortedMap<Integer, String> wordsSortedMap = getAllWordsMultithreading(allRetrievedFilePaths);
//        printNumOfHighestOccuringWords(maxNum, wordsSortedMap);
    }

}
