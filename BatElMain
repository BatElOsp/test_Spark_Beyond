package UI.StepDefs.ad;

import org.junit.Assert;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.Collectors;

public class BatElMain {

    public static SortedMap<String, Integer> generalMap = new TreeMap<>();
    private static Lock lock = new ReentrantLock();

// Methods

    public static List<File> readFilePathsFromConsole() {
        List<File> files = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        String lineNew = scanner.nextLine();
        while (!lineNew.isEmpty()) {
            File file = new File(lineNew);
            files.add(file);
            lineNew = scanner.nextLine();
        }
        scanner.close();
        return files;
    }

    public static void getAllFilePathsRecursively(List<File> filesFromConsole, List<File> allRetrievedFilePaths) {
        for (File fileFromConsole : filesFromConsole) {
            getFilesFromDirectory(fileFromConsole, allRetrievedFilePaths);
        }
    }

    public static void getFilesFromDirectory(File fileFromConsole, List<File> allRetrievedFilePaths) {
        if (!fileFromConsole.isDirectory()) {
            allRetrievedFilePaths.add(fileFromConsole);
        } else { //if the path is a directory which might contain files and subfolders, a recursion is needed to get all the files under that mother path
            File[] filesList = fileFromConsole.listFiles();
            Assert.assertNotNull("Files list is NULL! ", filesList);
            if (filesList.length != 0) {
                for (File file : filesList) {
                    getFilesFromDirectory(file, allRetrievedFilePaths);
                }
            }
        }
    }

    public static void printAllPaths(List<File> allRetrievedFilePaths) {
        allRetrievedFilePaths.forEach(path -> System.out.println(path));
    }

    public static Integer readNumberFromConsole() {
        Scanner scanner = new Scanner(System.in);
        int number;
        try {
            number = scanner.nextInt();
        } catch (InputMismatchException inputMismatchException) {
            System.out.println("This is not an integer. Please type the integer number of maximum occurring words: "); //best to give the user a few more tries, but meh.
            number = scanner.nextInt();
        } catch (NoSuchElementException noSuchElementException) {
            System.out.println("No number was typed. Please type the integer number of maximum occurring words: ");
            number = scanner.nextInt();
        }
        return number;
    }

    private static void updateGeneralWordsMap(Map<String, Integer> singleMap) {
        lock.lock();
        try {
            for (Map.Entry<String, Integer> entry : singleMap.entrySet()) {
                generalMap.merge(entry.getKey(), entry.getValue(), (occurenceInFile, occurenceInTotalMap) -> new Integer(occurenceInFile + occurenceInTotalMap));
            }
        } finally {
            lock.unlock();
        }
    }

    public static void getWordsFromSingleFile(File allRetrievedFilePath) {
        Map<String, Integer> singleMap = new HashMap<>();
        Scanner scanner = null;
        try {
            scanner = new Scanner(allRetrievedFilePath);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] wordsInLine = line.split("\\s+");
            for (String word : wordsInLine) {
                if (singleMap.containsKey(word)) {
                    singleMap.put(word, singleMap.get(word) + 1);
                } else {
                    singleMap.put(word, 1);
                }
            }
        }
        updateGeneralWordsMap(singleMap);
    }

    public static void printNumOfHighestOccuringWords(Integer maxNum, SortedMap wordsSortedMap) {
        if (wordsSortedMap.size() < maxNum) {
            System.out.println("Error! The requested number is higher than the number of words in the files! ");
        } else {
            for (int index = 0; index < wordsSortedMap.size(); index++) {
                System.out.println(wordsSortedMap.values().toArray()[index]);
            }
        }
    }


    public static void processFiles(List<File> allRetrievedFilePaths) {
        for (File file : allRetrievedFilePaths) {
            ReadingThread thread = new ReadingThread(file.getName() + "_thread", file);
            thread.run();
        }
    }

    public static void sortMapByValue(SortedMap<String, Integer> generalMap) {
        TreeMap<String, Integer> sorted = generalMap
                .entrySet()
                .stream()
                .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
                .collect(
                        Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2,
                                LinkedHashMap::new));
    }

// Main

    public static void main(String[] args) throws Exception {
        System.out.println("Please type the integer number of maximum occurring words: ");
        Integer maxNum = readNumberFromConsole();
        System.out.println("Please type a list of file paths: ");
        List<File> filesFromConsole = readFilePathsFromConsole();
        List<File> allRetrievedFilePaths = new ArrayList<>();
        getAllFilePathsRecursively(filesFromConsole, allRetrievedFilePaths);
        printAllPaths(allRetrievedFilePaths);
        processFiles(allRetrievedFilePaths);
        sortMapByValue(generalMap);
        printNumOfHighestOccuringWords(maxNum, generalMap);
    }
}

class ReadingThread extends Thread {
    private Thread thread;
    private String name;
    private File file;

    ReadingThread(String threadName, File threadFile) {
        name = threadName;
        file = threadFile;
    }

    public void run() {
        BatElMain.getWordsFromSingleFile(file);
    }

    public void start() {
        System.out.println("Starting " + name);
        if (thread == null) {
            thread = new Thread(this, name);
            thread.run();
        }
    }

//    public class BatElComparator implements Comparator<Integer> {
//        private final int value;
//        private Map<String, Integer> map;
//
//        public BatElComparator(Map<String, Integer> map) {
//            this.map = map;
//        }
//
//        public int compare(String a, String b) {
//            return map.get(a).compareTo(map.get(b));
//        }
//        @Override
//        public int compareTo(Integer yetAnotherInteger) {
//            return compare(this.value, yetAnotherInteger.value);
//        }
//    }
}
